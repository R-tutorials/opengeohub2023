---
title: "Processing large OpenStreetMap datasets for research"
# Fold code by default:
output:
  html_document:
    code_folding: hide
---

# Introduction

This practical was developed for the [OpenGeoHub summer school 2023](https://pretalx.earthmonitor.org/opengeohub-summer-school-2023/schedule/).

<!---
 Abstract


OpenGeoHub Summer School 2023
login
Processing large OpenStreetMap datasets for geocomputational research
2023-09-01, 09:00–10:30, Room 18 (Sala 18)

OpenStreetMap (OSM) is a free and openly editable map of the world. Like
Wikipedia and unlike government or corperation maintained datasets, OSM
is created and maintained by a community of volunteers, making it the
premier decentralized and fastest evolving source of geographic vector
data focussed on features relevant to human activity (e.g. roads,
buildings, cafes) on planet Earth. Unlike Wikipedia, every data point in
OSM has a geographic location and attributes must be structured as
key-value pairs. OSM is a rich source of data for geocomputational
research, but the decentralized nature of the project and the sheer
volume of data. ‘Planet.osm’ now has more nodes than there are people on
Earth, with more than 8 billion
nodes, and the rate of data
creation is increasing as the community grows, to 10 million
users in early 2023. The
size and rapid evolution of OSM are great strengths, democratising
geographic knowledge and ensuring resilience. However, these features
can make it difficult to work with OSM data.

This lecture will provide an introduction to working with OSM and will
cover the following:

    How and where to download OSM data
    How to process small amounts of OSM data using the osmdata R package
    How to process large OSM ‘extracts’ data with the osmextract R
    package
    Other command line tools for working with OSM data, including the
    mature and widely used osmium tool, the pyrosm Python package and
    the osm2streets web
    application and Rust codebase

Finally, the lecture will outline ideas for using OSM data. It will
conclude with a call to action, inspiring the use of this rich resource
to support policy objectives such as the fast and fair decarbonisation
of the global economy as societies transition away from inefficient,
polluting and costly fossil fuels.
What is your current associations to EU Horizon projects (if any)? –
Robin Lovelace

Robin Lovelace is Associate Professor of Transport Data Science at the Leeds Institute for Transport Studies (ITS) and Head of Data at the government agency Active Travel England. Robin specializes in geocomputation with a focus on developing geographic methods applied to modeling transport systems, active travel, and decarbonisation. Robin has experience not only researching but deploying transport models in inform sustainable policies and more effective use of transport investment, including as Lead Developer of the Propensity to Cycle Tool (see www.pct.bike), the basis of strategic cycle network plans nationwide. Robin has led numerous data science projects for organizations ranging from the Department for Transport to the World Bank.

Robin is author of popular open source software packages including R packages stplanr, stats19 and abstr. He has authored three reproducible and open source textbooks, Microsimulation with R, Efficient R Programming, and Geocomputation with R.
This speaker also appears in:

    Tidy geographic data with sf, dplyr, ggplot2, geos and friends (part 1)
    Tidy geographic data with sf, dplyr, ggplot2, geos and friends (part 2)

powered by pretalx · Contact us · Imprint


--->

As outlined in the session abstract, will cover

-  How and where to download OSM data
-  How to process small amounts of OSM data using the osmdata R package
-  How to process large OSM ‘extracts’ data with the osmextract R package
-  Other command line tools for working with OSM data, including the mature and widely used osmium tool, the pyrosm Python package and the osm2streets web application and Rust codebase

Finally, the session will outline ideas for using OSM data to support the fast and fair decarbonisation of the global economy.

# Prerequisites

To participate in the session, all you need is R and following packages:

```r
pkgs = c(
    "tidyverse",
    "osmdata",
    "osmextract"
)
remotes::install_cran(pkgs)
```

You may want to install the following packages for @sec-command-line:

- [osmium](https://osmcode.org/osmium-tool/)
- [pyrosm](https://pyrosm.readthedocs.io/en/latest/)
- [osm2streets](https://a-b-street.github.io/osm2streets/#1/0/0) (although this is currently mostly a web UI and does not have a command line interface)

# How and where to download OSM data {#sec-download}

<!---
 This is the docs from osmextract:

 
Skip to contents
rOpenSci
osmextract
0.5.0.9000

    Get started
    Reference
    Articles
    Changelog

Comparing the supported OSM providers
Source: vignettes/providers_comparisons.Rmd

This vignette presents a simple comparison between the OSM providers supported by osmextract, explaining their pros and cons. We decided to write this vignette since, as you will see in the following examples, even if you always start from the same pre-defined place, you can get significantly different OSM extracts according to the chosen provider. Hence, we want to help you choose the best suitable provider for a given situation.

We assume that you are already familiar with the basic functions in osmextract, otherwise please check the “Get Started” vignette for a more detailed introduction. Now, let’s start with an example, but, first of all, we have to load the package:

library(osmextract)
#> Data (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright.
#> Check the package website, https://docs.ropensci.org/osmextract/, for more details.
library(sf)
#> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE

We geocode the coordinates of Lima, the Capital of Peru,

lima = tmaptools::geocode_OSM("Lima, Peru")$coords

and look for a match in the OSM extracts using oe_match():

oe_match(lima, provider = "geofabrik")
#> $url
#> [1] "https://download.geofabrik.de/south-america/peru-latest.osm.pbf"
#> 
#> $file_size
#> [1] 1.86e+08
oe_match(lima, provider = "bbbike")
#> $url
#> [1] "https://download.bbbike.org/osm/bbbike/Lima/Lima.osm.pbf"
#> 
#> $file_size
#> [1] 15941307
oe_match(lima, provider = "openstreetmap_fr")
#> $url
#> [1] "http://download.openstreetmap.fr/extracts/south-america-latest.osm.pbf"
#> 
#> $file_size
#> [1] 3559974408

We can see that:

    when we used geofabrik provider (which is also the default provider), then the input place was matched with an OSM extract corresponding to Peru region;
    when we used the bbbike provider, then the input place was matched with an OSM extract corresponding to the city of Lima;
    when we used openstreetmap_fr provider, then the input data was matched with an OSM extract covering the whole of South America.

The reason behind these differences is that each OSM provider divides the geographical space into different discrete chunks, and, in the following paragraphs, we will show the tessellation used by each provider.
Geofabrik

geofabrik is a society that provides map-based services and free downloads of OSM extracts that are updated daily. These extracts are based on a division of the world into different regions, covering a whole continent (plus Russian Federation):

par(mar = rep(0, 4))
plot(geofabrik_zones[geofabrik_zones$level == 1, "name"], key.pos = NULL, main = NULL)

or several countries all around the world:

plot(geofabrik_zones[geofabrik_zones$level == 2, "name"], key.pos = NULL, main = NULL)

Geofabrik also defines several special zones, such as Alps, Britain and Ireland, Germany, Austria and Switzerland, US Midwest, US Northeast, US Pacific, US South and US West. Moreover, it contains extracts relative to some administrative subregions, mainly in Europe, Russia, Canada and South America:

plot(geofabrik_zones[geofabrik_zones$level == 3, "name"], key.pos = NULL, main = NULL)

Check ?geofabrik_zones and the provider’s webpage for more details.
Openstreetmap.fr

openstreetmap_fr extracts are taken from http://download.openstreetmap.fr/, a web-service that provides OSM data updated every few minutes. The extracts are based on several regions, such as the continents:

# Russian federation is considered as a level 1 zone
plot(openstreetmap_fr_zones[openstreetmap_fr_zones$level == 1, "name"], key.pos = NULL, main = NULL)

or some countries around the world (less than geofabrik):

plot(openstreetmap_fr_zones[openstreetmap_fr_zones$level == 2, "name"], key.pos = NULL, main = NULL)

It can be noticed that there are several holes (such as Peru, which is the reason why, in the first example, Lima was matched with South America data), implying that openstreetmap_fr cannot always be used for geographical matching of a place. Nevertheless, it provides extremely detailed extracts for some regions of the world, like China,

plot(openstreetmap_fr_zones[openstreetmap_fr_zones$parent == "china", "name"], key.pos = NULL, main = NULL)

India,

plot(openstreetmap_fr_zones[openstreetmap_fr_zones$parent == "india", "name"], key.pos = NULL, main = NULL)

France,

ids_2 = openstreetmap_fr_zones$parent %in% "france"
ids_3 = openstreetmap_fr_zones$parent %in% openstreetmap_fr_zones$id[ids_2]

plot(openstreetmap_fr_zones[ids_2 | ids_3, "name"], key.pos = NULL, main = NULL)

and Brazil

ids_2 = openstreetmap_fr_zones$parent %in% "brazil"
ids_3 = openstreetmap_fr_zones$parent %in% openstreetmap_fr_zones$id[ids_2]

plot(openstreetmap_fr_zones[ids_2 | ids_3, "name"], key.pos = NULL, main = NULL)

BBBike

bbbike provider is based on https://download.bbbike.org/osm/bbbike/. It is quite different from any other provider supported in osmextract since it contains OSM data for more than 200 cities worldwide.

par(mar = rep(0, 4))
plot(sf::st_geometry(spData::world))
plot(sf::st_geometry(bbbike_zones), border = "darkred", add = TRUE, lwd = 3)

bbbike provider is the safest choice if you are looking for OSM data relative to a particular city in the world.
On this page

    Geofabrik
    Openstreetmap.fr
    BBBike 

    About
    About rOpenSci
    Software Review
    Our Team
    Jobs
    Donate
    Contact Us

    Community
    Our Community
    Community calls
    Events
    Join the Discussion
    Code of conduct

    Resources
    Packages
    Use Cases
    Talks & Publications
    Documentation
    Newsletter
    Cite rOpenSci

rOpenSci is a fiscally sponsored project of NumFOCUS.


--->

As outlined in the [`providers_comparison`](https://docs.ropensci.org/osmextract/articles/providers_comparisons.html) vignettte in the [`osmextract`](https://docs.ropensci.org/osmextract/) package, there are several providers of OSM data. The main ones that provide regular extracts without need for logins are:

- [geofabrik](https://download.geofabrik.de/)
- [openstreetmap_fr](http://download.openstreetmap.fr/)
- [bbbike](https://download.bbbike.org/osm/bbbike/)

These are shown in the figures below, generated by code that can be 'unfolded' by clicking on the arrows:



...

# How to process small amounts of OSM data using the osmdata R package {#sec-osmdata}

The [osmdata](https://cran.r-project.org/package=osmdata) package is a mature and widely used tool for working with OSM data in R. It is designed to work with small amounts of data, such as the area around a city or a country. It is not designed to work with large amounts of data, such as the whole of Europe or the world. For that, we need a different approach, which is covered in the next section.


#  How to process large OSM ‘extracts’ data with the osmextract R package {#sec-osmextract}

The quickest way to get large OSM datasets in R (and possibly in any data analysis framework) is to use the [`osmextract`](https://docs.ropensci.org/osmextract/) package.

The package makes your life easy by automating many parts of the OSM extract identification, download, and processing pipeline, so you can focus on the analysis and high-impact reasearch!

Let's see how it works for the city of Poznan:


```{r}
library(osmextract)
library(sf)
```

We geocode the coordinates of Poznan, Poland

```{r, eval = FALSE}
poznan = tmaptools::geocode_OSM("Poznan, Poland")$coords
# poznan = c(x = 16.933, y = 52.408)
```

```{r}
#| echo: false
#| eval: false
dput(poznan)
c(x = 16.9335199, y = 52.4082663)
```

```{r, echo = FALSE}
poznan = c(x = 16.933, y = 52.408)
```

and look for a match in the OSM extracts using `oe_match()`: 

```{r, warning = FALSE, message = FALSE}
oe_match(poznan, provider = "geofabrik")
oe_match(poznan, provider = "bbbike")
oe_match(poznan, provider = "openstreetmap_fr")
```


# Other command line tools for working with OSM data {#sec-command-line}

...

# Ideas for using OSM data {#sec-ideas}


# References

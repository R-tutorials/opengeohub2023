---
format: html
title: Tidy geographic data
subtitle: "with sf, dplyr, ggplot2, geos and friends"
number-sections: true
# editor: 
#   render-on-save: true
bibliography: references.bib
---

These materials were created for the OpenGeoHub Summer School 2023.

They can be used with reference to the accompanying slides, available at [ogh23.robinlovelace.net/opengeohub2023](https://ogh23.robinlovelace.net/tidy-slides.html).

See the [parent repo](https://github.com/robinlovelace/opengeohub2023) and [session description in the agenda](https://pretalx.earthmonitor.org/opengeohub-summer-school-2023/talk/7JN3FV/) for context.

# Abstract {.unnumbered}

This lecture will provide an introduction to working with geographic data using R in a 'tidy' way. It will focus on using the `sf` package to read, write, manipulate, and plot geographic data in combination with the `tidyverse` metapackage. Why use the `sf` package with the `tidyverse`? The lecture will outline some of the ideas underlying the `tidyverse` and how they can speed-up data analysis pipelines, while making data analysis code easier to read and write. We will see how the following lines:

``` r
library(sf)
library(tidyverse)
```

can provide a foundation on which the many geographic data analysis problems can be solved. The lecture will also cover on more recently developed packages that integrate with the `tidyverse` to a greater and lesser extent. We will look at how the `geos` package, which provides a simple and high-performance interface to the GEOS library for performing geometric operations on geographic data, integrates with the `tidyverse`. The `tidyverse` is not the right tool for every data analysis task and we touch on alternatives for working with raster data, with reference to the `terra` package, and alternative frameworks such as `data.table`. Finally, we will also look at how the 'tidy' philosophy could be implemented in other programming languages, such as Python.

The focus throughout will be on practical skills and using packages effectively within the wider context of project management tools, integrated development environments (we recommend VS Code with appropriate extensions or RStudio), and version control systems.

# Learning objectives

By the end of the session, participants will be able to:

-   Read, write, manipulate, and plot geographic data using the `sf` package
-   Use the `tidyverse` metapackage to speed-up the writing of geographic data analysis pipelines
-   Use the `geos` package to perform geometric operations on geographic data
-   Understand the strengths and weaknesses of the `tidyverse` for geographic data analysis

# Prerequisites

We recommend you run the code in the practical session with a modern integrated development environment (IDE) such as

-   RStudio: an IDE focussed on data science and software development with R. See [posit.co](https://posit.co/download/rstudio-desktop/) for installation instructions.
-   VS Code: a general purpose, popular and future-proof IDE with support for R. See [github.com/REditorSupport/vscode-R](https://github.com/REditorSupport/vscode-R#getting-started) and [quarto.org](https://quarto.org/docs/get-started/) for installation instructions.

After you have installed a suitable IDE you will need to install R packages used in this tutorial. You can install the packages we'll use with the following commands:

```{r}
#| message: false
#| warning: false
# Install remotes if not already installed
if (!requireNamespace("remotes")) {
    install.packages("remotes")
}

# The packages we'll use
pkgs = c(
    "sf",
    "tidyverse",
    "geos",
    "data.table",
    "spData"
)
```

```{r}
#| eval: false
remotes::install_cran(pkgs)
```

After running the above commands, you should be able to load the packages with the following command (we will load the packages individually in subsequent sections):

```{r}
#| eval: false
#| warning: false
sapply(pkgs, require, character.only = TRUE)
```

# An introduction to the tidyverse

The `tidyverse` is a collection of packages that provides a unified set of functions for data science. Load the `tidyverse` with the following command:

```{r}
library(tidyverse)
```

As shown in the output, the package loads 9 sub-packages. In this tutorial we will focus on

-   `dplyr`, which provides convenient functions for manipulating data frames
-   `ggplot2`, which provides a powerful and flexible system for creating plots

A good way to understand it is to get started with a small dataset. So let's load the `sf` package and the `spData` package, which contains the `world` dataset:

```{r}
library(sf)
library(spData)
```

After loading the packages run the following commands to create an object called countries, containing countries whose centroids are within 200km of the Polish border:

```{r}
names(world) # check we have the data
poland = world |>
    filter(name_long == "Poland")
world_centroids = world |>
    st_centroid()
country_centroids = world_centroids |>
  st_filter(poland, .predicate = st_is_within_distance, dist = 2e5)
countries = world |>
  filter(name_long %in% country_centroids$name_long)
countries_df = countries |>
  select(name_long, pop, area_km2) |>
  st_drop_geometry()
```

Don't worry about the syntax for now. The important thing is that we now have a data frame with three columns, representing the name, population and area of four countries. We can print out the contents of the data frame by typing its name (this is equivalent to `print(countries_df)`):

```{r}
countries_df
```

The output above shows information about each country in a tabular. A feature of the tidyverse is that its default data frame class (the `tibble` which extends base R's `data.frame` as shown below) prints results in an informative and space-efficient way.

```{r}
class(countries_df)
```

`ggplot2` is dedicated plotting package that is loaded when you load the `tidyverse`. It has native support for geographic objects, as shown in the figure below which shows the output of `plot(countries)` next to the equivalent `ggplot2` code.

```{r}
#| layout-ncol: 2
plot(countries)
countries |>
  ggplot() +
    geom_sf()
```

## Pipes

A characteristic feature of the tidyverse is the use of the pipe operator. You can use R's new native pipe operator (`|>`), first available in R 4.1.0, or the magrittr pipe operator (`%>%`). The pipe operator is used to chain together functions, making it easier to read and write code. It can be particularly useful when used in combination with RStudio's intellisense feature, which provides suggestions for column names as you type. Try typing the following in RStudio and hitting Tab with the curso located between the brackets on the final line to see this in action. It will allow you to select the variable you're interested in without quote marks, using a feature called non-standard evaluation (NSE) [@wickham2019].

```{r}
countries_df |>
  filter()
```

## Exercises

1.  Re-create the `country_centroids` object, using `world_centroids` and `poland` and inputs, but this time using base R syntax with the `[` operator.

-   Bonus: use the `bench::mark()` function to compare the performance of the base R and tidyverse implementation
-   Open question: Is this a good thing to benchmark? Why or why not?

```{r}
#| eval: false
#| echo: false
country_centroids2 = world_centroids[poland, , op = st_is_within_distance, dist = 2e5]
waldo::compare(country_centroids, country_centroids2)
#> ✔ No differences
res = bench::mark(
    base = world_centroids[poland, , op = st_is_within_distance, dist = 2e5],
    st_filter = world_centroids |>
  st_filter(poland, .predicate = st_is_within_distance, dist = 2e5)
)
res
#> # A tibble: 2 × 13
#>   expression      min median `itr/sec` mem_alloc `gc/sec` n_itr  n_gc total_time
#>   <bch:expr> <bch:tm> <bch:>     <dbl> <bch:byt>    <dbl> <int> <dbl>   <bch:tm>
#> 1 base         10.7ms 12.4ms      81.2     208KB     6.58    37     3      456ms
#> 2 st_filter      12ms 12.5ms      79.7     199KB     6.64    36     3      452ms
```

# Attribute operations with dplyr

# Making maps with ggplot2

# Geometry operations

# `tidyverse` + `geos` workflows

# Further reading

The following free and open access resources provide a strong foundation for further learning in this space.

-   @wickham2023, hosted at <https://r4ds.hadley.nz/>, is a detailed introduction to the tidyverse

-   @lovelace2019 provides a wide ranging yet beginner-friendly introduction to using R for geographic analysis

-   Any other suggestions welcome, there's much more out there!